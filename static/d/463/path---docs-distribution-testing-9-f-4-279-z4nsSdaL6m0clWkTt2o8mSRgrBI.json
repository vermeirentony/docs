{"pageContext":{"html":"<h1 id=\"testing-and-specifying-the-api\"><a href=\"#testing-and-specifying-the-api\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing and Specifying the API</h1>\n<p>Now that you have a functional API, it might be interesting to write some tests to ensure your API have no potential\nbugs. A set of useful tools to specify and test your API are easily installable in the API Platform distribution. We\nrecommend you and we will focus on two tools:</p>\n<ul>\n<li><a href=\"https://github.com/nelmio/alice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alice</a>, an expressive fixtures generator to write data fixtures, and its Symfony\nintegration, <a href=\"https://github.com/hautelook/AliceBundle#database-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a>;</li>\n<li><a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a>, a testing framework to cover your classes with unit tests and to write\nfunctional tests thanks to its Symfony integration, <a href=\"https://symfony.com/doc/current/components/phpunit_bridge.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit Bridge</a>.</li>\n</ul>\n<p>Official Symfony recipes are provided for both tools.</p>\n<h2 id=\"creating-data-fixtures\"><a href=\"#creating-data-fixtures\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Data Fixtures</h2>\n<p>Before creating your functional tests, you will need a dataset to pre-populate your API and be able to test it.</p>\n<p>First, install <a href=\"https://github.com/nelmio/alice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alice</a> and <a href=\"https://github.com/hautelook/AliceBundle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php composer require --dev alice</code></pre></div>\n<p>Thanks to Symfony Flex, <a href=\"https://github.com/hautelook/AliceBundle/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a> is ready to use\nand you can place your data fixtures files in a directory named <code class=\"language-text\">fixtures/</code>.</p>\n<p>Then, create some fixtures for <a href=\"/docs/distribution/index/\">the bookstore API you created in the tutorial</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/fixtures/book.yaml</span>\n\n<span class=\"token key atrule\">App\\Entity\\Book</span><span class=\"token punctuation\">:</span>\n    book_<span class=\"token punctuation\">{</span>1..10<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">isbn</span><span class=\"token punctuation\">:</span> &lt;isbn13()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> &lt;sentence(4)<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> &lt;text()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> &lt;name()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">publicationDate</span><span class=\"token punctuation\">:</span> &lt;dateTime()<span class=\"token punctuation\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/fixtures/review.yaml</span>\n\n<span class=\"token key atrule\">App\\Entity\\Review</span><span class=\"token punctuation\">:</span>\n    review_<span class=\"token punctuation\">{</span>1..20<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">rating</span><span class=\"token punctuation\">:</span> &lt;numberBetween(0<span class=\"token punctuation\">,</span> 5)<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">body</span><span class=\"token punctuation\">:</span> &lt;text()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> &lt;name()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">publicationDate</span><span class=\"token punctuation\">:</span> &lt;dateTime()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">book</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'@book_*'</span></code></pre></div>\n<p>You can now load your fixtures in the database with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php bin/console hautelook:fixtures:load</code></pre></div>\n<p>To learn more about fixtures, take a look at the documentation of <a href=\"https://github.com/nelmio/alice/blob/master/README.md#table-of-contents\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alice</a>\nand <a href=\"https://github.com/hautelook/AliceBundle/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a>.</p>\n<h2 id=\"writing-functional-tests\"><a href=\"#writing-functional-tests\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Functional Tests</h2>\n<p>Now that you have some data fixtures for your API, you are ready to write functional tests with <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a>.</p>\n<p>Install the Symfony test pack which includes <a href=\"https://symfony.com/doc/current/components/phpunit_bridge.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit Bridge</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php composer require --dev test-pack</code></pre></div>\n<p>Your API is ready to be functionally tested. Create your test classes under the <code class=\"language-text\">tests/</code> directory.</p>\n<p>Here is an example of functional tests specifying the behavior of <a href=\"/docs/distribution/index/\">the bookstore API you created in the tutorial</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/tests/ApiTest.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Tests</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Hautelook<span class=\"token punctuation\">\\</span>AliceBundle<span class=\"token punctuation\">\\</span>PhpUnit<span class=\"token punctuation\">\\</span>RefreshDatabaseTrait</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Bundle<span class=\"token punctuation\">\\</span>FrameworkBundle<span class=\"token punctuation\">\\</span>Client</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Bundle<span class=\"token punctuation\">\\</span>FrameworkBundle<span class=\"token punctuation\">\\</span>Test<span class=\"token punctuation\">\\</span>WebTestCase</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>Response</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebTestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">RefreshDatabaseTrait</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** @var Client */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$client</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Retrieves the book list.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testRetrieveTheBookList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/books'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'hydra:totalItems'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'hydra:totalItems'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'hydra:member'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'hydra:member'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Throws errors when data are invalid.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testThrowErrorsWhenDataAreInvalid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'1312'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'author'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Kévin Dunglas'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'publicationDate'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'2013-12-01'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/books'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Creates a book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testCreateABook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9781782164104'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Persistence in PHP with Doctrine ORM'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM. You\\'ll learn through explanations and code samples, all tied to the full development of a web application.'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'author'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Kévin Dunglas'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'publicationDate'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'2013-12-01'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/books'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'9781782164104'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Updates a book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testUpdateABook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9781234567897'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'PUT'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">findOneIriBy</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9790456981541'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'9781234567897'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Deletes a book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testDeleteABook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'DELETE'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">findOneIriBy</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9790456981541'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEmpty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Retrieves the documentation.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testRetrieveTheDocumentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Accept'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'text/html'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'text/html; charset=UTF-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertContains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello API Platform'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">client</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param string|array|null $content\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$method</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Response\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$server</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'CONTENT_TYPE'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'application/ld+json'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'HTTP_ACCEPT'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'application/ld+json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$headers</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token single-quoted-string string\">'content-type'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token variable\">$server</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'CONTENT_TYPE'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token variable\">$server</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'HTTP_'</span><span class=\"token punctuation\">.</span><span class=\"token function\">strtoupper</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">!==</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'#^application/(?:.+\\+)?json$#'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$server</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'CONTENT_TYPE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">client</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$method</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$server</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">client</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">findOneIriBy</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$criteria</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$resource</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$container</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'doctrine'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">findOneBy</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$criteria</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$container</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'api_platform.iri_converter'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getIriFromitem</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resource</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>As you can see, the example uses the <a href=\"https://github.com/hautelook/AliceBundle#database-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trait <code class=\"language-text\">RefreshDatabaseTrait</code></a>\nfrom <a href=\"https://github.com/hautelook/AliceBundle/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a> which will, at the beginning of each\ntest, purge the database, load fixtures, begin a transaction, and, at the end of each test, roll back the\ntransaction previously begun. Because of this, you can run your tests without worrying about fixtures.</p>\n<p>All you have to do now is to run your tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php bin/phpunit</code></pre></div>\n<p>If everything is working properly, you should see <code class=\"language-text\">OK (6 tests, 27 assertions)</code>. Your Linked Data API is now specified\nand tested thanks to <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a>!</p>\n<h3 id=\"additional-and-alternative-testing-tools\"><a href=\"#additional-and-alternative-testing-tools\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional and Alternative Testing Tools</h3>\n<p>You may also be interested in these alternative testing tools (not included in the API Platform distribution):</p>\n<ul>\n<li><a href=\"https://github.com/lchrusciel/ApiTestCase\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ApiTestCase</a>, a handy <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a> test case\nfor going further by testing JSON and XML APIs in your Symfony applications;</li>\n<li><a href=\"http://behat.org/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behat</a> and its <a href=\"https://github.com/Behatch/contexts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behatch extension</a>, a\n<a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behavior-Driven development</a> framework to write the API\nspecification as user stories and in natural language then execute these scenarios against the application to validate\nits behavior;</li>\n<li><a href=\"https://blackfire.io/player\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blackfire Player</a>, a nice DSL to crawl HTTP services, assert responses, and extract data\nfrom HTML/XML/JSON responses (<a href=\"https://github.com/api-platform/demo/blob/master/test-api.bkf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see example in API Platform Demo</a>);</li>\n<li><a href=\"https://www.getpostman.com/docs/writing_tests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postman tests</a> (proprietary), create functional test for your API\nPlatform project using a nice UI, benefit from <a href=\"https://www.getpostman.com/docs/importing_swagger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Swagger integration</a>\nand run tests in the CI using <a href=\"https://github.com/postmanlabs/newman\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">newman</a>;</li>\n<li><a href=\"https://github.com/coduo/php-matcher\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHP Matcher</a>, the Swiss Army knife of JSON document testing.</li>\n</ul>\n<h2 id=\"writing-unit-tests\"><a href=\"#writing-unit-tests\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Unit Tests</h2>\n<p>Take a look at <a href=\"https://symfony.com/doc/current/testing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Symfony documentation about testing</a> to learn how to\nwrite unit tests with <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a> in your API Platform project.</p>","editPath":"distribution/testing.md","title":"Testing and Specifying the API","previous":{"slug":"/docs/distribution/","title":"Getting Started with API Platform: Hypermedia and GraphQL API, Admin and Progressive Web App"},"next":{"slug":"/docs/distribution/debugging/","title":"Debugging"}}}